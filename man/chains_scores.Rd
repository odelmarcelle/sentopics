% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{chains_scores}
\alias{chains_scores}
\title{Compute scores of topic models (chains)}
\usage{
chains_scores(x, window = 110, nWords = 10)
}
\arguments{
\item{x}{a valid \code{multi_chains} object, obtained through the estimation of a
topic model using \code{\link[=fit.sentopicmodel]{fit()}} and the argument
\code{nChains} greater than \code{1}.}

\item{window}{optional. If \code{NULL}, use the default window for each coherence
metric (10 for C_NPMI and 110 for C_V). It is possible to override these
default windows by providing an integer or \code{"boolean"} to this argument,
determining a new window size for all measures.}

\item{nWords}{the number of words used to compute coherence. See
\code{\link[=coherence]{coherence()}}.}
}
\value{
A \code{data.table} with some statistics about each chain. For the
coherence metrics, the value shown is the mean coherence across all topics
of a chain
}
\description{
Compute various scores (log likelihood, coherence) for a list of topic
models.
}
\section{Parallelism}{
 When \code{nChains > 1}, the function can take advantage of
\link[future.apply:future_lapply]{future.apply::future_lapply} (if installed) to spread the computation over
multiple processes. This requires the specification of a parallel strategy
using \code{\link[future:plan]{future::plan()}}. See the examples below.
}

\examples{
model <- LDA(ECB_press_conferences_tokens[1:10])
model <- fit(model, 10, nChains = 5)
chains_scores(model, window = 5)
chains_scores(model, window = "boolean")

# -- Parallel computation --
require(future.apply)
future::plan("multisession", workers = 2) # Set up 2 workers
chains_scores(model, window = "boolean")

future::plan("sequential") # Shut down workers

}
\seealso{
\code{\link[=chains_distances]{chains_distances()}} \code{\link[=coherence]{coherence()}}
}
